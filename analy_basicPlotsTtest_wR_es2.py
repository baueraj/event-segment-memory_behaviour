from init_es2 import *
from analy_funs_es2 import *
from scipy.stats import ttest_rel

if plt.get_fignums():
    plt.close('all')
plt.show()

fileSavePath = '../results/meetKamy_plt2/'

allDat = get_participant_data_plt(aPs, cPs, paths)

pGrps = ['aDat_byCs', 'cDat_byCs']

for pGrp in pGrps:

    # ========================================================================= 
    # get Morey within-subjects SE
    for i in range(len(allDat[pGrp])):
        df2Write = allDat[pGrp][i]
        df2Write.to_csv('df_' + pGrp + '_' + str(i + 1) + '.csv', sep=',') #read by morey_errorBars.R
    
    os.system('Rscript morey_errorBars.R')
    
    dfSEwi = pd.read_csv('dfSEwi_byCs.csv') #generated by morey_errorBars.R
    # =========================================================================
    
    
    
    # =========================================================================                   
    # plot barplots (with SEwi error bars, in R) of acc and RT separately per cartoon
    dat_plot = [allDat[pGrp][0].mean().values.tolist()[0:2], allDat[pGrp][0].mean().values.tolist()[2:],
                allDat[pGrp][1].mean().values.tolist()[0:2], allDat[pGrp][1].mean().values.tolist()[2:]]
    dat_SEwi_plot = [[dfSEwi.loc[0,'acc'], dfSEwi.loc[0,'acc']], [dfSEwi.loc[0,'RT'], dfSEwi.loc[0,'RT']],
                     [dfSEwi.loc[1,'acc'], dfSEwi.loc[1,'acc']], [dfSEwi.loc[1,'RT'], dfSEwi.loc[1,'RT']]]
    
    pltColors = ['b', 'r']
    plt_acc_Xlabels = ['wi_acc', 'ac_acc']
    plt_RT_Xlabels = ['wi_RT', 'ac_RT']
    
    for i in range(len(dat_plot)):
        fig, ax = plt.subplots()
        
        #fig.set_size_inches(8.0, 5.0)
        
        for j in range(len(dat_plot[i])):
            ax.bar(j/2 + 0.5, dat_plot[i][j], width = 0.4, align='center', color = pltColors[j])
            ax.errorbar(j/2 + 0.5, dat_plot[i][j], yerr = dat_SEwi_plot[i][j], ecolor = 'k', elinewidth = 1.5)
            
        rng = np.arange(0.5, 1.5, 0.5)
        ax.set_xticks(rng)
        
        if i % 2 == 0:
            pltTitle = pGrp[0] + '_' + cartoonNames[int(np.floor(i/2))] + '_acc'
            ax.set_xticklabels(plt_acc_Xlabels, fontsize=20)
            #ax.set_ylim([0.3, 1.0]) # <-----------hard-coded ylims
        else:
            pltTitle = pGrp[0] + '_' + cartoonNames[int(np.floor(i/2))] + '_RT'
            ax.set_xticklabels(plt_RT_Xlabels, fontsize=20)
            #ax.set_ylim([900, 1600]) # <-----------hard-coded ylims
    
        plt.title(pltTitle, fontsize=20)
        plt.yticks(fontsize=18)
        plt.savefig(fileSavePath + 'barplots/{0}_f{1}.jpg'.format(pltTitle,i))
    # =========================================================================   
    
    
    
    # =========================================================================   
    # boxplot of difference scores of within vs. across boundaries of acc and RT separately per cartoon
    dat_bPlot = [allDat[pGrp][0]['ac_acc'] - allDat[pGrp][0]['wi_acc'], allDat[pGrp][0]['ac_RT'] - allDat[pGrp][0]['wi_RT'],
                 allDat[pGrp][1]['ac_acc'] - allDat[pGrp][1]['wi_acc'], allDat[pGrp][1]['ac_RT'] - allDat[pGrp][1]['wi_RT']]
    
    for i in range(len(dat_bPlot)):
        fig, ax = plt.subplots()
        #fig.set_size_inches(8.0, 5.0)
        
        bp = ax.boxplot(dat_bPlot[i].values, showfliers=False)
        
        y = dat_bPlot[i].values
        x = np.random.normal(1, 0.02, size=len(y))
        ax.plot(x, y, 'ro')
        #ax.set_xticks([])
        
        if i % 2 == 0:
            pltTitle = pGrp[0] + '_' + cartoonNames[int(np.floor(i/2))] + '_acc'
            ax.set_xticklabels([plt_acc_Xlabels[1] + ' - ' + plt_acc_Xlabels[0]],
                               fontsize=20)
            #ax.set_ylim([-0.3, 0.7]) # <-----------hard-coded ylims
        else:
            pltTitle = pGrp[0] + '_' + cartoonNames[int(np.floor(i/2))] + '_RT'
            ax.set_xticklabels([plt_RT_Xlabels[1] + ' - ' + plt_RT_Xlabels[0]],
                               fontsize=20)
            #ax.set_ylim([-600, 900]) # <-----------hard-coded ylims
        
        plt.title(pltTitle, fontsize=20)
        plt.yticks(fontsize=18)       
        plt.savefig(fileSavePath + 'boxplots/{0}_f{1}.jpg'.format(pltTitle,i))
    # =========================================================================
    
    
    
    # =========================================================================
    # paired-sample ttests of acc and RT
    acc_ttest = [ttest_rel(allDat[pGrp][0].loc[:,'ac_acc'], allDat[pGrp][0].loc[:,'wi_acc']),
                     ttest_rel(allDat[pGrp][1].loc[:,'ac_acc'], allDat[pGrp][1].loc[:,'wi_acc'])]
    RT_ttest = [ttest_rel(allDat[pGrp][0].loc[:,'ac_RT'], allDat[pGrp][0].loc[:,'wi_RT']),
                     ttest_rel(allDat[pGrp][1].loc[:,'ac_RT'], allDat[pGrp][1].loc[:,'wi_RT'])]
